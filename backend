1. package.json
json
{
  "name": "bloodnet-backend",
  "version": "1.0.0",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "express": "^4.19.2",
    "swagger-ui-express": "^5.0.0",
    "uuid": "^9.0.0",
    "yamljs": "^0.3.0"
  },
  "devDependencies": {
    "nodemon": "^3.1.0"
  }
}
2. server.js (Backend Logic from Assignment 3 Contract)
javascript
import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import { v4 as uuidv4 } from 'uuid';
import swaggerUi from 'swagger-ui-express';
import YAML from 'yamljs';

const swaggerDocument = YAML.load('./swagger.yaml');

const app = express();
app.use(cors());
app.use(bodyParser.json());

// ===== In-Memory Storage =====
let users = [];
let requests = [];

// ===== User Registration =====
app.post('/api/users/register', (req, res) => {
  const { email } = req.body;
  if (users.find(u => u.email === email)) {
    return res.status(400).json({ error: "Email already exists" });
  }
  const newUser = {
    ...req.body,
    id: uuidv4(),
    created_at: new Date().toISOString()
  };
  users.push(newUser);
  res.status(201).json(newUser);
});

// ===== User Login =====
app.post('/api/users/login', (req, res) => {
  const { email, password } = req.body;
  const user = users.find(u => u.email === email && u.password === password);
  if (!user) {
    return res.status(401).json({ error: "Invalid credentials" });
  }
  res.json({ token: "fake-jwt-token", user_id: user.id });
});

// ===== Create Blood Request =====
app.post('/api/requests', (req, res) => {
  const newRequest = {
    ...req.body,
    id: uuidv4(),
    status: "pending",
    verified: false,
    created_at: new Date().toISOString()
  };
  requests.push(newRequest);
  res.status(201).json(newRequest);
});

// ===== Get All Requests (Nearby) =====
app.get('/api/requests', (req, res) => {
  if (requests.length === 0) {
    return res.status(404).json({ error: "No requests found nearby" });
  }
  res.json(requests);
});

// ===== Get Request by ID =====
app.get('/api/requests/:id', (req, res) => {
  const found = requests.find(r => r.id === req.params.id);
  if (!found) {
    return res.status(404).json({ error: "Request not found" });
  }
  res.json(found);
});

// ===== Update Request Status =====
app.patch('/api/requests/:id/status', (req, res) => {
  const requestItem = requests.find(r => r.id === req.params.id);
  if (!requestItem) {
    return res.status(404).json({ error: "Request not found" });
  }
  if (!["fulfilled", "cancelled"].includes(req.body.status)) {
    return res.status(400).json({ error: "Invalid status" });
  }
  requestItem.status = req.body.status;
  res.json({ message: "Status updated successfully" });
});

// ===== Find Matching Donors =====
app.get('/api/donors/match', (req, res) => {
  const { blood_type } = req.query;
  const matchingDonors = users.filter(
    u => u.is_donor && u.blood_type === blood_type
  );
  if (matchingDonors.length === 0) {
    return res.status(404).json({ error: "No matching donors found" });
  }
  res.json(matchingDonors);
});

// ===== Swagger Docs =====
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

// ===== Start Server =====
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`âœ… Server running: http://localhost:${PORT}`);
  console.log(`ðŸ“„ Swagger docs: http://localhost:${PORT}/api-docs`);
});
3. swagger.yaml (Matches API_CONTRACT.md for BloodNet)
text
openapi: 3.0.0
info:
  title: BloodNet API
  version: 1.0.0
  description: API Documentation for Blood Donation Platform
paths:
  /api/users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                phone: { type: string }
                password: { type: string }
                blood_type: { type: string }
                is_donor: { type: boolean }
                latitude: { type: number }
                longitude: { type: number }
      responses:
        201:
          description: Created user
        400:
          description: Email already exists

  /api/users/login:
    post:
      summary: Login user
      requestBody:
        required: true
      responses:
        200:
          description: Success
        401:
          description: Invalid credentials

  /api/requests:
    post:
      summary: Create a blood request
      responses:
        201:
          description: Request created
    get:
      summary: Get all nearby requests
      responses:
        200:
          description: List of requests
        404:
          description: No requests found

  /api/requests/{id}:
    get:
      summary: Get single request by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        200:
          description: Found
        404:
          description: Not found

  /api/requests/{id}/status:
    patch:
      summary: Update request status
      parameters:
        - in: path
          name: id
          required: true
      requestBody:
        required: true
      responses:
        200:
          description: Status updated
        400:
          description: Invalid status

  /api/donors/match:
    get:
      summary: Find matching donors
      parameters:
        - in: query
          name: blood_type
          schema: { type: string }
      responses:
        200:
          description: Donors found
        404:
          description: No donors found
4. README.md (For Submission)
text
# BloodNet - Backend API

## How to Run Locally
1. Go to backend folder:
cd backend

text
2. Install dependencies:
npm install

text
3. Start the server:
npm start

text
4. Open your browser and visit:
- API Docs: [http://localhost:3000/api-docs](http://localhost:3000/api-docs)
- API Base: `http://localhost:3000`

## Notes
- This is an **in-memory backend** â€” data resets when the server restarts.
- Endpoints follow the **API Contract** from Assignment 3 exactly.
Next Steps for You
Create /backend folder in your GitHub repo.

Add the four files above.
Run:

bash
cd backend
npm install
npm start
Visit http://localhost:3000/api-docs â€” youâ€™ll see an interactive Swagger UI.

Push to GitHub and submit the repo link.
